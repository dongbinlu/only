<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒；当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志组件上下文路径名，用于区分不同应用程序的记录 -->
    <contextName>springboot-logback</contextName>
    <!--定义日志文件的存储地址目录 -->
    <property name="LOG_HOME" value="/opt/ucmp/logs/netty"/>

    <!-- 定义日志文件名称 -->
    <property name="appName" value="netty"></property>

    <!--	ch.qos.logback.core.ConsoleAppender 表示控制台输出-->
    <!-- 控制台输出的配置 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}:%L - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            日志文件输出的文件名，我们使用的是路径${LOG_HOME}+文件名（文件名里面加了日期）
            -->
            <FileNamePattern>${LOG_HOME}/${appName}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--日志文件保留天数
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>365</MaxHistory>
            <!--
            当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动
            注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}:%L - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>

    </appender>

    <!--
       logger主要用于存放日志对象，也可以定义日志类型、级别
       name：表示匹配的logger类型前缀，也就是包的前半部分
       level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
       additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
       false：表示只用当前logger的appender-ref，
       true： 表示当前logger的appender-ref和rootLogger的appender-ref都有效
   -->
    <!-- 根日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>
    <!--     <logger name="org.apache.ibatis" level="DEBUG">
             <appender-ref ref="STDOUT"/>
         </logger>

         <logger name="java.sql" level="debug">
             <appender-ref ref="STDOUT"/>
         </logger>-->
    <!--<logger name="org.springframework" level="debug" additivity="false"/>-->

    <!--自定义日志级别配置-->
    <!--<logger name="com.shudun.dms.mapper" level="DEBUG"/>-->
</configuration>
